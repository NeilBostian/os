.intel_syntax noprefix

# Outputs an interrupt stub for interrupt N, with error code 0
.macro ISR N
.global ISR_\N
ISR_\N:
    push 0
    push \N
    jmp ISR_generic_handler

.endm

# Outputs an interrupt stub for interrupt N, without pushing error code
.macro ISR_ERR N
.global ISR_\N
ISR_\N:
    push \N
    jmp ISR_generic_handler

.endm

.section .text
ISR 0x00
ISR 0x01
ISR 0x02
ISR 0x03
ISR 0x04
ISR 0x05
ISR 0x06
ISR 0x07
ISR 0x08
ISR 0x09
ISR 0x0A
ISR 0x0B
ISR 0x0C
ISR 0x0D
ISR_ERR 0x0E
ISR 0x0F
ISR 0x10
ISR 0x11
ISR 0x12
ISR 0x13
ISR 0x14
ISR 0x15
ISR 0x16
ISR 0x17
ISR 0x18
ISR 0x19
ISR 0x1A
ISR 0x1B
ISR 0x1C
ISR 0x1D
ISR 0x1E
ISR 0x1F
ISR 0x20
ISR 0x21
ISR 0x22
ISR 0x23
ISR 0x24
ISR 0x25
ISR 0x26
ISR 0x27
ISR 0x28
ISR 0x29
ISR 0x2A
ISR 0x2B
ISR 0x2C
ISR 0x2D
ISR 0x2E
ISR 0x2F
ISR 0x30
ISR 0x31
ISR 0x32
ISR 0x33
ISR 0x34
ISR 0x35
ISR 0x36
ISR 0x37
ISR 0x38
ISR 0x39
ISR 0x3A
ISR 0x3B
ISR 0x3C
ISR 0x3D
ISR 0x3E
ISR 0x3F
ISR 0x40
ISR 0x41
ISR 0x42
ISR 0x43
ISR 0x44
ISR 0x45
ISR 0x46
ISR 0x47
ISR 0x48
ISR 0x49
ISR 0x4A
ISR 0x4B
ISR 0x4C
ISR 0x4D
ISR 0x4E
ISR 0x4F
ISR 0x50
ISR 0x51
ISR 0x52
ISR 0x53
ISR 0x54
ISR 0x55
ISR 0x56
ISR 0x57
ISR 0x58
ISR 0x59
ISR 0x5A
ISR 0x5B
ISR 0x5C
ISR 0x5D
ISR 0x5E
ISR 0x5F
ISR 0x60
ISR 0x61
ISR 0x62
ISR 0x63
ISR 0x64
ISR 0x65
ISR 0x66
ISR 0x67
ISR 0x68
ISR 0x69
ISR 0x6A
ISR 0x6B
ISR 0x6C
ISR 0x6D
ISR 0x6E
ISR 0x6F
ISR 0x70
ISR 0x71
ISR 0x72
ISR 0x73
ISR 0x74
ISR 0x75
ISR 0x76
ISR 0x77
ISR 0x78
ISR 0x79
ISR 0x7A
ISR 0x7B
ISR 0x7C
ISR 0x7D
ISR 0x7E
ISR 0x7F
ISR 0x80
ISR 0x81
ISR 0x82
ISR 0x83
ISR 0x84
ISR 0x85
ISR 0x86
ISR 0x87
ISR 0x88
ISR 0x89
ISR 0x8A
ISR 0x8B
ISR 0x8C
ISR 0x8D
ISR 0x8E
ISR 0x8F
ISR 0x90
ISR 0x91
ISR 0x92
ISR 0x93
ISR 0x94
ISR 0x95
ISR 0x96
ISR 0x97
ISR 0x98
ISR 0x99
ISR 0x9A
ISR 0x9B
ISR 0x9C
ISR 0x9D
ISR 0x9E
ISR 0x9F
ISR 0xA0
ISR 0xA1
ISR 0xA2
ISR 0xA3
ISR 0xA4
ISR 0xA5
ISR 0xA6
ISR 0xA7
ISR 0xA8
ISR 0xA9
ISR 0xAA
ISR 0xAB
ISR 0xAC
ISR 0xAD
ISR 0xAE
ISR 0xAF
ISR 0xB0
ISR 0xB1
ISR 0xB2
ISR 0xB3
ISR 0xB4
ISR 0xB5
ISR 0xB6
ISR 0xB7
ISR 0xB8
ISR 0xB9
ISR 0xBA
ISR 0xBB
ISR 0xBC
ISR 0xBD
ISR 0xBE
ISR 0xBF
ISR 0xC0
ISR 0xC1
ISR 0xC2
ISR 0xC3
ISR 0xC4
ISR 0xC5
ISR 0xC6
ISR 0xC7
ISR 0xC8
ISR 0xC9
ISR 0xCA
ISR 0xCB
ISR 0xCC
ISR 0xCD
ISR 0xCE
ISR 0xCF
ISR 0xD0
ISR 0xD1
ISR 0xD2
ISR 0xD3
ISR 0xD4
ISR 0xD5
ISR 0xD6
ISR 0xD7
ISR 0xD8
ISR 0xD9
ISR 0xDA
ISR 0xDB
ISR 0xDC
ISR 0xDD
ISR 0xDE
ISR 0xDF
ISR 0xE0
ISR 0xE1
ISR 0xE2
ISR 0xE3
ISR 0xE4
ISR 0xE5
ISR 0xE6
ISR 0xE7
ISR 0xE8
ISR 0xE9
ISR 0xEA
ISR 0xEB
ISR 0xEC
ISR 0xED
ISR 0xEE
ISR 0xEF
ISR 0xF0
ISR 0xF1
ISR 0xF2
ISR 0xF3
ISR 0xF4
ISR 0xF5
ISR 0xF6
ISR 0xF7
ISR 0xF8
ISR 0xF9
ISR 0xFA
ISR 0xFB
ISR 0xFC
ISR 0xFD
ISR 0xFE
ISR 0xFF

ISR_generic_handler:
    # save the registers
    push eax
    push ebx
    push ecx
    push edx
    push esi
    push edi
    push ebp
    mov eax, cr2
    push eax

    # call the C function
    call cpu_interrupt_handler

    # restore the registers
    add esp, 4 # cr2
    pop ebp
    pop edi
    pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax

    # pop error_code and interrupt_number off the stack
    add esp, 8

    # return to the code that got interrupted
    iret
